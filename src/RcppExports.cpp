// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// parse_nested_records
CharacterVector parse_nested_records(std::vector<std::string> s, std::string sep_from, std::string sep_to);
RcppExport SEXP _sabre_parse_nested_records(SEXP sSEXP, SEXP sep_fromSEXP, SEXP sep_toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep_from(sep_fromSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep_to(sep_toSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_nested_records(s, sep_from, sep_to));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sabre_parse_nested_records", (DL_FUNC) &_sabre_parse_nested_records, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_sabre(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
